class Codebase::Maintenance::AddDocumentation < Struct.new(:codebase, :files, :event_callback, keyword_init: true)
  include Deckhand::Lm

  def self.run(codebase, **kwargs, &event_callback)
    kwargs.merge!(codebase: codebase, event_callback: event_callback)
    new(**kwargs)
      .run()
  end

  def run
    branch_name = "add-documentation-#{SecureRandom.hex(8)}"
    puts "Run got called"
    ran = false
    codebase.new_branch(branch_name) do |status|
      if ran
        puts "Already ran!? #{status.inspect}"
      end
      if status.success? && !ran
        ran = true
        puts "Going to add documentation to #{files.inspect}: #{status.inspect}"
        files.each do |file|
          next unless add_documentation_to_file(file)
          codebase.commit("Add automatically generated documentation to #{file}")
        end

        codebase.git_push(branch_name) do |status|
          if status.success?
            codebase.merge_request(title: "Add documentation", body: "This merge request was automatically generated by Bosun Deckhand.", branch_name: branch_name)
          else
            raise "Failed to push changes to #{codebase.name}: #{status.inspect}"
          end
        end
      end
    end
  end

  def add_documentation_to_file(file)
    context = codebase.context.split("\n\n").map do |line|
      {
        type: :observation,
        content: line,
      }
    end

    root_context = Deckhand::Context.new("Adding documentation to files", history: context, codebase: codebase, event_callback: event_callback)

    root_context.add_information("We are adding documentation to #{file}.")

    file_content = File.read(File.join(codebase.path, file))

    prediction = Deckhand::Tasks::WriteDocumentation.run(file_content, context: root_context.deep_dup)

    if prediction.blank?
      root_context.add_observation("No documentation was added to #{file}.")
      return
    end

    File.write(File.join(codebase.path, file), prediction)

    root_context.add_observation("Documentation was added to #{file}.")
  end
end
